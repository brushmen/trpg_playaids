<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="description" content="a Javascript version of Jamie Fristrom's single player RPG titled 'Storyleaves'">
    <meta name="author" content="brushmen">
    <title>Storyleaves</title>
    <script type="text/javascript" src="scripts/jquery.min.js"></script>
<script>
////  CARDS FOR THE STORY DECK ///////////
var cards = [
    "character: brother",
    "character: sister",
    "character: father",
    "character: mother",
    "character: grandmother",
    "character: grandfather",
    "character: granddaughter",
    "character: grandson",
    "character: daughter",
    "character: son",
    "character: uncle",
    "character: aunt",
    "character: cousin",
    "character: best friend",
    "character: confidant",
    "character: classmate",
    "character: lover",
    "character: neighbor",
    "character: civilian",
    "character: refugee",
    "character: doctor",
    "character: soldier",
    "character: cook",
    "character: farmer",
    "character: artist",
    "character: writer",
    "character: captain",
    "character: mercenary",
    "character: smuggler",
    "character: laborer",
    "character: guard",
    "character: bodyguard",
    "character: entertainer",
    "character: street performer",
    "character: actor",
    "character: singer",
    "character: danger",
    "character: musician",
    "character: poet",
    "character: trader",
    "character: hunter",
    "character: bounty-hunter",
    "character: scout",
    "character: messenger",
    "character: spy",
    "character: prisoner",
    "character: con-artist",
    "character: detective",
    "character: judge",
    "character: marketer",
    "character: journalist",
    "character: courier",
    "character: warlord",
    "character: diplomat",
    "character: politician",
    "character: scholar",
    "character: law-keeper",
    "character: custodian",
    "character: miner",
    "character: secretary",
    "character: governor",
    "character: inspector",
    "character: assassin",
    "character: subordinate",
    "character: prostitute",
    "place: home",
    "place: jail",
    "place: docks",
    "place: barrack",
    "place: hospital",
    "place: restaurant",
    "place: inn",
    "place: theater",
    "event: birth",
    "event: death",
    "event: marriage",
    "event: injury",
    "event: illness",
    "event: hijack",
    "event: stage show",
    "event: negotiation",
    "event: inauguration",
    "event: natural disaster",
    "event: invention",
    "event: invasion",
    "event: date",
    "event: duel",
    "event: battle",
    "event: ambush",
    "event: sacrifice",
    "event: surgery",
    "event: interrogation",
    "event: explosion",
    "event: competition",
    "event: celebration",
    "event: betrayal",
    "event: robbery",
    "event: trauma",
    "item: weapon",
    "item: treasure",
    "item: gift",
    "item: drug",
    "item: alcohol",
    "item: painting",
    "item: book",
    "item: map",
    "item: letter",
    "item: mask",
    "item: heirloom",
    "aspect: strong",
    "aspect: fast",
    "aspect: smart",
    "aspect: wise",
    "aspect: nimble",
    "aspect: beautiful",
    "aspect: charming",
    "aspect: loving",
    "aspect: mad",
    "aspect: logical",
    "aspect: cheerful",
    "aspect: stubborn",
    "aspect: inhuman",
    "aspect: loyal",
    "aspect: disabled",
    "aspect: friendless",
    "aspect: paranoid",
    "aspect: greedy",
    "aspect: arrogant",
    "aspect: lascivious",
    "aspect: abrasive",
    "aspect: noisy",
    "aspect: reserved",
    "aspect: detached",
    "aspect: anxious",
    "aspect: depressed",
    "aspect: awkward",
    "aspect: austere",
    "aspect: authoritative",
    "aspect: careless",
    "aspect: bossy",
    "aspect: vindictive",
    "aspect: classy",
    "aspect: clumsy",
    "aspect: combative",
    "aspect: controlling",
    "aspect: cowardly",
    "aspect: ambitious",
    "aspect: ambivalent",
    "aspect: honorable",
    "aspect: honest",
    "aspect: decisive",
    "aspect: extreme",
    "aspect: fierce",
    "aspect: flirty",
    "aspect: forgiving",
    "aspect: glamorous",
    "aspect: gregarious",
    "aspect: guilty",
    "aspect: hateful",
    "aspect: hostile",
    "aspect: humble",
    "aspect: immature",
    "aspect: incompetent",
    "aspect: industrious",
    "aspect: intimidating",
    "aspect: insightful",
    "aspect: intense",
    "aspect: intellectual",
    "aspect: introspective",
    "aspect: jaded",
    "aspect: jittery",
    "aspect: keen",
    "aspect: malicious",
    "aspect: manipulative",
    "aspect: mercurial",
    "aspect: mischievous",
    "aspect: optimistic",
    "aspect: pessimistic",
    "aspect: ostentatious",
    "aspect: quixotic",
    "aspect: scarred",
    "aspect: adopted",
    "aspect: secretive",
    "aspect: underhanded",
    "aspect: shadowy",
    "aspect: shady",
    "aspect: scheming",
    "aspect: ex",
    "aspect: nemesis",
    "aspect: superior",
    "aspect: inferior",
    "aspect: patron",
    "detail: dripping blood",
    "detail: suicide",
    "detail: homocide",
    "detail: artificial limb",
    "detail: medicine"
];

var modern = [
    "character: lobbyist",
    "character: mechanic",
    "character: pilot",
    "character: researcher",
    "character: security officer",
    "character: technician",
    "character: engineer",
    "character: translator",
    "item: photo",
    "item: gun",
    "detail: PTSD"
];

var spaceopera = [
    "character: robot",
    "character: android",
    "place: Earth",
    "place: Mars",
    "place: Moon",
    "place: space",
    "place: spaceship",
    "place: cargo bay",
    "item: EVA vehicle",
    "item: data chip",
    "item: EVA suit",
    "item: environment suit",
    "item: mech",
    "item: implant",
    "item: neural implant",
    "detail: mechanical heart",
    "detail: hologram",
    "detail: dark abyss",
    "detail: experiment"
];

var masseffect = [
    "character: Shadow Broker",
    "character: Councilor",
    "character: Human",
    "character: Turian",
    "character: Batarian",
    "character: Asari",
    "character: Elcor",
    "character: Krogan",
    "character: Salarian",
    "character: Vorcha",
    "character: Prothean",
    "character: Quarian",
    "character: Geth",
    "character: Hanar",
    "character: Volus",
    "character: Drell",
    "character: Collector",
    "character: Rachni",
    "place: Citadel Zakera Ward",
    "place: Citadel Kithoi Ward",
    "place: Citadel Tayseri Ward",
    "place: Citadel Bachjret Ward",
    "place: Citadel Shalta/Aroch Ward",
    "place: Mass Relay",
    "place: Citadel",
    "place: Tuchanka",
    "place: Palaven",
    "place: Thessia",
    "place: Noveria",
    "place: SurKesh",
    "place: KharShan",
    "place: Rannoch",
    "place: Dekuuna",
    "place: Irune",
    "place: Heshtok",
    "place: Kahje",
    "place: Omega",
    "place: Illium",
    "place: Ios",
    "place: Sanctuary",
    "place: Afterlife Club",
    "place: Purgatory Bar",
    "place: Armax Arsenal Arena",
    "place: Silver Coast Casino",
    "place: Castle Arcade",
    "place: Presidium",
    "event: Reaper",
    "item: Omni-Tool",
    "item: Biotic amp",
    "item: graybox",
    "item: dreadnaught",
    "detail: VI",
    "detail: AI",
    "detail: Normandy SR-2",
    "detail: Spectre",
    "detail: Biotic",
    "detail: Justicar",
    "detail: Ardat-Yakshi",
    "detail: Cerberus",
    "detail: Systems Alliance",
    "detail: Turian Hierarchy",
    "detail: Salarian Union",
    "detail: Asari Republics",
    "detail: Batarian Hegemony",
    "detail: Tuchanka State Union",
    "detail: Quarian Conclave",
    "detail: Hastatim",
    "detail: Huntress",
    "detail: Battlemaster",
    "detail: Special Tasks Group",
    "detail: Blood Pack",
    "detail: Blue Suns",
    "detail: Noveria Development Corporation",
    "detail: Eclipse",
    "detail: Keeper",
    "detail: Pyjak",
    "detail: Varren",
    "detail: First Contact War",
    "detail: husk",
    "detail: Kepesh-Yakshi (Asari chess)"
];

var ancient = [
    "character: emperor",
    "character: empress",
    "character: regent",
    "character: king",
    "character: queen",
    "character: lord",
    "character: duke",
    "character: marquis",
    "character: noble",
    "character: prince",
    "character: crown prince",
    "character: heir-apparent",
    "character: princess",
    "character: chamber maid",
    "character: warrior",
    "character: general",
    "character: commander",
    "character: strategist",
    "character: eunuch",
    "character: literati",
    "character: minister",
    "character: record keeper",
    "character: historian",
    "character: ritualist",
    "character: scribe",
    "character: nomad",
    "character: barbarian",
    "character: bailiff",
    "place: palace",
    "place: war tent",
    "place: hill",
    "place: river",
    "place: flat land",
    "place: ditch",
    "event: coronation",
    "item: horse",
    "item: talisman",
    "detail: shock troop",
    "detail: cavalry",
    "detail: horse archer",
    "detail: rumor",
    "detail: tactic",
    "detail: alchemy"
];

var threekingdoms = [
    "place: Pass",
    "place: Sili",
    "item: catapult",
    "item: repeating crossbow",
    "item: dagger-axe with spear 戟",
    "item: spear with crescent blades 青龙戟",
    "item: spear with two crescent blades 方天戟",
    "item: long spear 槊",
    "detail: Yellow Turban",
    "detail: Tiger And Leopard Cavalry",
    "detail: White Feathered Unit",
    "detail: formation",
    "detail: art of war"
];

var china = [
    "place: Mount Tai",
    "place: Mount Hua",
    "place: Mount Heng",
    "place: Mount Song",
    "place: Mount Tian",
    "place: Mount Kunlun",
    "place: Mount Emei",
    "place: Mount Putuo",
    "place: Mount Wudang",
    "place: Mount Lao",
    "place: Mount Huang",
    "place: Mount Longhu",
    "place: Mount Taibai",
    "place: Mount Wuzhi",
    "place: West Lake",
    "place: Hong Lake",
    "place: Lake Tai",
    "place: Lake Qinghai",
    "place: Heavenly Lake",
    "place: Changan",
    "place: Luoyang",
    "place: Long River",
    "place: Yellow River",
    "place: You Province",
    "place: Qing Province",
    "place: Ji Province",
    "place: Bing Province",
    "place: Xu Province",
    "place: Yan Province",
    "place: Liang Province",
    "place: Yu Province",
    "place: Yang Province",
    "place: Jing Province",
    "place: Yi Province",
    "item: eight trigrams",
    "item: scripture",
    "item: incense",
    "detail: Feng Shui"
];

var weapons = [
    "item: sword",
    "item: sabre",
    "item: axe",
    "item: dart",
    "item: halberd",
    "item: staff",
    "item: bow",
    "item: crossbow",
    "item: knife",
    "item: dagger",
    "item: club",
    "item: mace",
    "item: spear",
    "item: whip",
    "item: trident",
    "item: rake",
    "item: shield",
    "item: sling-shot"
];

var wuxia = [
    "character: beggar",
    "character: vagrant",
    "character: vigilante",
    "character: brigand",
    "character: magistrate",
    "character: administrator",
    "character: Buddhist monk",
    "character: Buddhist abbot",
    "character: Buddhist nun",
    "character: galavant",
    "character: master",
    "character: apprentice",
    "character: opera performer",
    "character: escort",
    "place: Cliff of Repentance",
    "event: competition",
    "event: joust for a spouse",
    "event: official examination",
    "event: conscription",
    "event: border skirmish",
    "event: insurgency",
    "event: escort mission",
    "event: banquet",
    "item: single-edged blade 刀",
    "item: double-edged blade 剑",
    "item: glaive/guandao 关刀",
    "item: flying dagger 飞刀",
    "item: flying guillotine 血滴子",
    "item: hidden weapons 暗器",
    "item: duster 拂尘",
    "item: ruler 尺",
    "item: fan 扇",
    "item: ribbon 丝带",
    "item: Ruyi Scepter 如意",
    "item: wheels 轮",
    "item: butterfly knives 蝴蝶双刀",
    "item: judge's brush 判官笔",
    "item: crutches 枴",
    "item: flying claw 飞爪",
    "item: Emei piercers 峨眉刺",
    "item: rope dart 绳镖",
    "item: sleeve arrow 袖里箭",
    "item: three section staff 三节棍",
    "item: monk's spade 月牙铲",
    "item: hoop/ring 环",
    "item: nine section whip 九节鞭",
    "item: snake lance 蛇矛",
    "item: hook swords 钩",
    "item: Meteor hammer 流星锤",
    "item: wolf-tooth club 狼牙棒",
    "item: horse-chopping saber 斩马刀",
    "item: nine-ringed saber 九环刀",
    "item: dagger-axe 戈",
    "item: bar mace 锏",
    "item: venom",
    "item: antidote",
    "item: manual",
    "aspect: orthodox",
    "aspect: unorthodox",
    "aspect: external martial arts",
    "aspect: internal martial arts",
    "aspect: yin/soft",
    "aspect: yang/hard",
    "aspect: foxy",
    "aspect: demon 妖",
    "aspect: devil 魔",
    "detail: Qi/Chi",
    "detail: lightfoot",
    "detail: fist",
    "detail: open palm",
    "detail: closed palm",
    "detail: training",
    "detail: Sect 宗/派",
    "detail: School 门",
    "detail: clan 家",
    "detail: Association 帮",
    "detail: Society 会",
    "detail: Escort Agency 镖局",
    "detail: pressure points",
    "detail: elixir field 丹田",
    "detail: meditation",
    "detail: Qi deviation 走火入魔",
    "detail: pavilion",
    "detail: pagoda",
    "detail: cupped hands 抱拳",
    "detail: hand-seals",
    "detail: sword light/energy 剑气",
    "detail: killing intent 煞气",
    "detail: Beggars Clan",
    "detail: Money Gang",
    "detail: Kongdong Sect",
    "detail: Kunlun Sect",
    "detail: Emei Sect",
    "detail: Huashan Sect",
    "detail: Qingcheng Sect",
    "detail: Quanzhen Sect",
    "detail: Qinglong Society",
    "detail: Diancang Sect",
    "detail: Shaolin Sect",
    "detail: Tianshan Sect",
    "detail: Wudang Sect",
    "detail: Tang Clan",
    "detail: Honghua Society",
    "detail: Tiandi Society",
    "detail: Zoroastrian",
    "detail: Buddhism",
    "detail: brotherhood"
];

// add specific set to default set of cards
//cards = cards.concat(modern);
//cards = cards.concat(spaceopera);
//cards = cards.concat(masseffect);
cards = cards.concat(ancient);
cards = cards.concat(china);
cards = cards.concat(weapons);
cards = cards.concat(wuxia);

//////// UI INTERACTION /////////////

function updateTable() {
    var x = document.getElementById("table");
    x.innerHTML = "";

    for (var i = 0; i < table.length; i++) {

        card = table[i];
        if (cardType(card) == "character") {
            color = "black";
        }
        else if (cardType(card) == "place") {
            color = "green";
        }
        else if (cardType(card) == "event") {
            color = "red";
        }
        else if (cardType(card) == "item") {
            color = "blue";
        }
        else if (cardType(card) == "aspect") {
            color = "purple";
        }
        else if (cardType(card) == "detail") {
            color = "orange";
        }

        x.innerHTML += "<div class='card' style='color: " + color + "' onclick=\"pickCard('" + card + "')\">" + card + "</div>";

    }
}

function updateDeck() {
    document.getElementById("deck").innerHTML = "<a href=\"#\" onclick=\"setFocus('deck')\">Deck</a><br>" + cards.length + " cards<br>remain";
}

function updateHand() {
    var x = document.getElementById("hand");
    x.innerHTML = "Hand: ";
    for (var i = 0; i < hand.length; i++) {
        x.innerHTML += "<div class='card' onclick=\"pickCard('" + hand[i] + "')\">" + hand[i] + "</div>";
    }
}

function updateDiscard() {
    var x = document.getElementById("discard");
    var last = discard[discard.length - 1];
    x.innerHTML = "Discarded";
    if (last) { // if not empty
        x.innerHTML += "<br>" + last;
    }
}

function updateProtagonist() {
    var x = document.getElementById("protagonist");
    x.innerHTML = "<a href=\"#\" onclick=\"setFocus('protagonist')\">Protagonist</a>";

    if (phase == "setup") {
        if (protagonist) {
            x.innerHTML += "<div class='card' onclick=\"pickCard('" + protagonist + "')\">" + protagonist + "</div>";
        }
    }

    else if (phase == "play") {
        x.innerHTML += "<br>" + cardDesc(protagonist);
        x.innerHTML += "<div id='progress'>" + goalProgress + "/" + goalMax + " progress</div><div id='conditions'>" + conditions + "/" + conditionMax + " conditions</div>";
    }
}

function updateBeloved() {
    var x = document.getElementById("beloved");
    x.innerHTML = "<a href=\"#\" onclick=\"setFocus('beloved')\">Beloved</a>";

    if (phase == "setup") {
        if (beloved) {
            x.innerHTML += "<div class='card' onclick=\"pickCard('" + beloved + "')\">" + beloved + "</div>";
        }
    }
    else if (phase == "play") {
        if (beloved) {
            x.innerHTML += "<br>" + cardDesc(beloved);
        }
    }
}

function updateAntagonist() {
    var x = document.getElementById("antagonist");
    x.innerHTML = "<a href=\"#\" onclick=\"setFocus('antagonist')\">Antagonist</a>";

    if (phase == "setup") {
        if (antagonist) {
            x.innerHTML += "<div class='card' onclick=\"pickCard('" + antagonist + "')\">" + antagonist + "</div>";
        }
    }
    else if (phase == "play") {
            x.innerHTML += "<br>" + cardDesc(antagonist);
    }
}

function updatePFacet() {
    var x = document.getElementById("pfacet");
    x.innerHTML = "<a href=\"#\" onclick=\"setFocus('pfacet')\">Protagonist Facet</a>";

    if (pfacet) {
        x.innerHTML += "<div class='card' onclick=\"pickCard('" + pfacet + "')\">" + pfacet + "</div>";
    }
}

function updateBFacet() {
    var x = document.getElementById("bfacet");
    x.innerHTML = "<a href=\"#\" onclick=\"setFocus('bfacet')\">Beloved Facet</a>";

    if (bfacet) {
        x.innerHTML += "<div class='card' onclick=\"pickCard('" + bfacet + "')\">" + bfacet + "</div>";
    }
}

function updatePBShared() {
    var x = document.getElementById("pbshared");
    x.innerHTML = "<a href=\"#\" onclick=\"setFocus('pbshared')\">Shared between P/B</a>";

    if (pbshared) {
        x.innerHTML += "<div class='card' onclick=\"pickCard('" + pbshared + "')\">" + pbshared + "</div>";
    }
}

function updateAFacet() {
    var x = document.getElementById("afacet");
    x.innerHTML = "<a href=\"#\" onclick=\"setFocus('afacet')\">Antagonist Facet</a>";

    if (afacet) {
        x.innerHTML += "<div class='card' onclick=\"pickCard('" + afacet + "')\">" + afacet + "</div>";
    }
}

function updateAPShared() {
    var x = document.getElementById("apshared");
    x.innerHTML = "<a href=\"#\" onclick=\"setFocus('apshared')\">Shared between A/P</a>";

    if (apshared) {
        x.innerHTML += "<div class='card' onclick=\"pickCard('" + apshared + "')\">" + apshared + "</div>";
    }
}

function updateABShared() {
    var x = document.getElementById("abshared");
    x.innerHTML = "<a href=\"#\" onclick=\"setFocus('abshared')\">Shared between A/B</a>";
    if (abshared) {
        x.innerHTML += "<div class='card' onclick=\"pickCard('" + abshared + "')\">" + abshared + "</div>";
    }
}

function updateHint(text) {
    var old = document.getElementById("gamelog").innerHTML;
    document.getElementById("gamelog").innerHTML = text + "<br>" + old;
}

function enablePlayerTurnButtons(show = true) {
    var style = "none";
    if (show) {
        style = "inline";
    }

    document.getElementById("waitandsee").style.display = style;
    document.getElementById("pursuegoal").style.display = style;
    document.getElementById("sacrificeresource").style.display = style;
    if (resources.length < 1) {
        // hide this button if there is no available resource
        document.getElementById("sacrificeresource").style.display = "none";
    }
    document.getElementById("reversecondition").style.display = style;
    if (conditions == 0) {
        document.getElementById("reversecondition").style.display = "none";
    }
    document.getElementById("attackantagonist").style.display = style;
    if (antagAttacked) {
        // hide this button if antagonist was attacked successfully
        document.getElementById("attackantagonist").style.display = "none";
    }
}

function enablePlayerResponseButtons(show = true) {
    var style = "none";
    if (show) {
        style = "inline";
    }

    if (hasLowerResource()) {
        document.getElementById("sacrificeresource").style.display = style;
    }
    document.getElementById("playfromdeck").style.display = style;
    document.getElementById("givein").style.display = style;
}

//// OTHER FUNCTIONS ///////////////

function shuffle(array) {
  var currentIndex = array.length, temporaryValue, randomIndex;

  // While there remain elements to shuffle...
  while (0 !== currentIndex) {

    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}

function reshuffle() {
    updateHint("note: RESHUFFLE card was drawn, discarded cards will return to the deck");

    // shuffle discard pile back into deck
    cards = cards.concat(discard);
    discard = new Array();

    // shuffle
    cards = shuffle(cards);
}

function setFocus(variable) {
    var hint_choose_char = "Hint: select or unselect a character for ";

    switch(variable) {
        case "protagonist":
            focus = variable;
            if (phase == "setup") {
                updateHint(hint_choose_char + " " + variable);
            }
            break;
        case "beloved":
            focus = variable;
            if (phase == "setup") {
                updateHint(hint_choose_char + " " + variable);
            }
            break;
        case "antagonist":
            focus = variable;
            if (phase == "setup") {
                updateHint(hint_choose_char + " " + variable);
            }
            break;
        case "pfacet":
            focus = variable;
            if (phase == "setup") {
                updateHint(hint_choose_char + " " + " protagonist's facet");
            }
            break;
        case "bfacet":
            focus = variable;
            if (phase == "setup") {
                updateHint(hint_choose_char + " " + " beloved's facet");
            }
            break;
        case "pbshared":
            focus = variable;
            if (phase == "setup") {
                updateHint(hint_choose_char + " facet shared between protagonist and beloved");
            }
            break;
        case "afacet":
            focus = variable;
            if (phase == "setup") {
                updateHint(hint_choose_char + " antagonist's facet");
            }
            break;
        case "apshared":
            focus = variable;
            if (phase == "setup") {
                updateHint(hint_choose_char + " facet shared between antagonist and protagonist");
            }
            break;
        case "abshared":
            focus = variable;
            if (phase == "setup") {
                updateHint(hint_choose_char + " facet shared between antagonist and beloved");
            }
            break;
        case "deck":
            focus = variable;
            if (phase == "setup") {
                updateDeck();
            }
            break;
        case "pursue":
            focus = variable;
            break;
        case "sacrifice":
            focus = variable;
            break;
        case "attack":
            focus = variable;
            break;
        default:
            break;
    }
}

function pickCard(card) {
    var hint_characterplease = "Hint: pick a character type card please";
    var hint_pickfreecard = "Hint: pick a card that's not already associated please";

    if (phase == "setup") {

        if (focus == "protagonist") {

            // make sure card is of character type

            if (cardType(card) == "character") {

                if (protagonist == card) {
                    // unselecting the character card
                    moveCard(card, focus, "table");
                }

                else {
                    // choose from cards on the table
                    if (table.includes(card)) {
                        if (protagonist == "") {
                            moveCard(card, "table", focus);
                        }
                        else { // replace existing choice
                            moveCard(protagonist, focus, "table");
                            moveCard(card, "table", focus);
                        }
                    }
                    else {
                        updateHint(hint_pickfreecard);
                    }
                }

            }

            else {
                updateHint(hint_characterplease);
            }
        }

        else if (focus == "beloved") {

            // make sure card is of character type
            if (cardType(card) == "character") {

                if (beloved == card) {
                    // unselecting the character card
                    moveCard(card, focus, "table");
                }

                else {
                    // choose from cards on the table
                    if (table.includes(card)) {
                        if (beloved == "") {
                            moveCard(card, "table", focus);
                        }
                        else { // replace existing choice
                            moveCard(beloved, focus, "table");
                            moveCard(card, "table", focus);
                        }
                    }
                    else {
                        updateHint(hint_pickfreecard);
                    }
                }
            }
            else {
                updateHint(hint_characterplease);
            }
        }

        else if (focus == "antagonist") {
            // make sure card is of character type

            if (cardType(card) == "character") {

                if (antagonist == card) {
                    // unselecting the character card
                    moveCard(card, focus, "table");
                }

                else {
                    // choose from cards on the table
                    if (table.includes(card)) {
                        if (antagonist == "") {
                            moveCard(card, "table", focus);
                        }
                        else { // replace existing choice
                            moveCard(antagonist, focus, "table");
                            moveCard(card, "table", focus);
                        }
                    }
                    else {
                        updateHint(hint_pickfreecard);
                    }
                }
            }
            else {
                updateHint(hint_characterplease);
            }
        }

        else if (focus == "pfacet") {

            if (pfacet == card) {
                // unselecting the card
                moveCard(card, focus, "table");
            }
            else {
                // choose from cards on the table
                if (table.includes(card)) {
                    if (pfacet == "") {
                        moveCard(card, "table", focus);
                    }
                    else { // replace existing choice
                        moveCard(pfacet, focus, "table");
                        moveCard(card, "table", focus);
                    }
                }
                else {
                    updateHint(hint_pickfreecard);
                }
            }
        }

        else if (focus == "bfacet") {
            if (bfacet == card) {
                // unselecting the card
                moveCard(card, focus, "table");
            }
            else {
                // choose from cards on the table
                if (table.includes(card)) {
                    if (bfacet == "") {
                        moveCard(card, "table", focus);
                    }
                    else { // replace existing choice
                        moveCard(bfacet, focus, "table");
                        moveCard(card, "table", focus);
                    }
                }
                else {
                    updateHint(hint_pickfreecard);
                }
            }
        }

        else if (focus == "pbshared") {

            if (pbshared == card) {
                // unselecting the card
                moveCard(card, focus, "table");
            }
            else {
                // choose from cards on the table
                if (table.includes(card)) {
                    if (pbshared == "") {
                        moveCard(card, "table", focus);
                    }
                    else { // replace existing choice
                        moveCard(pbshared, focus, "table");
                        moveCard(card, "table", focus);
                    }
                }
                else {
                    updateHint(hint_pickfreecard);
                }
            }
        }

        else if (focus == "afacet") {

            if (afacet == card) {
                // unselecting the card
                moveCard(card, focus, "table");
            }
            else {
                // choose from cards on the table
                if (table.includes(card)) {
                    if (afacet == "") {
                        moveCard(card, "table", focus);
                    }
                    else { // replace existing choice
                        moveCard(afacet, focus, "table");
                        moveCard(card, "table", focus);
                    }
                }
                else {
                    updateHint(hint_pickfreecard);
                }
            }
        }

        else if (focus == "apshared") {

            if (apshared == card) {
                // unselecting the card
                moveCard(card, focus, "table");
            }
            else {
                // choose from cards on the table
                if (table.includes(card)) {
                    if (apshared == "") {
                        moveCard(card, "table", focus);
                    }
                    else { // replace existing choice
                        moveCard(apshared, focus, "table");
                        moveCard(card, "table", focus);
                    }
                }
                else {
                    updateHint(hint_pickfreecard);
                }
            }
        }

        else if (focus == "abshared") {

            if (abshared == card) {
                // unselecting the card
                moveCard(card, focus, "table");
            }
            else {
                // choose from cards on the table
                if (table.includes(card)) {
                    if (abshared == "") {
                        moveCard(card, "table", focus);
                    }
                    else { // replace existing choice
                        moveCard(abshared, focus, "table");
                        moveCard(card, "table", focus);
                    }
                }
                else {
                    updateHint(hint_pickfreecard);
                }
            }
        }
    }
    else if (phase == "play") {

        if (protagMove == "wait" && focus != "sacrifice") {
            
            // card should be from player's hand
            if (hand.includes(card)) {
                if (protagCard == "") {
                    moveCard(card, "hand", "table");
                    protagCard = card;
                    protagCardValue = cardValue(card);
                }

                // higher card wins
                if (protagCardValue > antagCardValue) {
                    updateHint("{after wait-and-see} your " + protagCard + " beat " + antagCard + "; round " + roundnumber + " ends");
                    newRound();
                }
                else {
                    updateHint("{after wait-and-see} your " + protagCard + " does not beat " + antagCard + ", how do you respond?");
                    responseTurnSetup();
                    protagCard = "";
                }
            }
            else {
                updateHint("Hint: play cards from your hand or try another option");
            }
        }

        else if (protagMove == "pursue" && focus != "sacrifice") {
            // card should be from player's hand
            if (hand.includes(card)) {
                if (protagCard == "") {
                    moveCard(card, "hand", "table");
                    protagCard = card;
                    protagCardValue = cardValue(card);
                }

                if (antagCard == "") {
                    antagMove();
                }

                // lower card wins
                if (protagCardValue < antagCardValue) {
                    goalProgress++;
                    updateProtagonist();
                    updateHint("{pursue goal} your " + protagCard + " beat " + antagCard + "; gain progress; round " + roundnumber + " ends");
                    newRound();
                }
                else { // player may respond
                    responseTurnSetup();
                    updateHint("{pursue goal} your " + protagCard + " does not beat " + antagCard + ", how do you respond?");
                    protagCard = "";
                }
            }
        }

        else if (protagMove == "reverse" && focus != "sacrifice") {
            // card should be from player's hand
            if (hand.includes(card)) {
                if (protagCard == "") {
                    moveCard(card, "hand", "table");
                    protagCard = card;
                    protagCardValue = cardValue(card);
                }

                if (antagCard == "") {
                    antagMove();
                }

                // lower card wins
                if (protagCardValue < antagCardValue) {
                    updateHint("{reverse condition} your " + protagCard + " beat " + antagCard + "; reverse one existing condition narratively but not mechanically; round " + roundnumber + " ends");
                    newRound();
                }
                else { // player may respond
                    responseTurnSetup();
                    updateHint("{reverse condition} your " + protagCard + " does not beat " + antagCard + ", how do you respond?");
                    protagCard = "";
                }
            }
        }

        else if (protagMove == "sacrifice" && focus == "sacrifice") {
            // during sacrifice

            // pick a card from available resources
            var index = resources.indexOf(card);
            if (index > -1) {
                resources.splice(index, 1);
                if (card == pfacet) {
                    pfacet = "";
                    updatePFacet();
                }
                else if (card == bfacet) {
                    bfacet = "";
                    updateBFacet();
                }
                else if (card == pbshared) {
                    pbshared = "";
                    updatePBShared();
                }
                else if (card == afacet) {
                    afacet = "";
                    updateAFacet();
                }
                else if (card == apshared) {
                    apshared = "";
                    updateAPShared();
                }
                else if (card == abshared) {
                    abshared = "";
                    updateABShared();
                }
                // draw 3 cards from deck
                for (var i = 0; i < 3; i++) {
                    moveCard("", "deck", "hand");
                }
                updateHint("{sacrifice} remove " + card + "; draw 3 cards into hand; now lower card wins");
                protagCard = card;
                protagCardValue = cardValue(protagCard);

                if (antagCard == "") {
                    antagMove();
                }
                // lower card wins
                if (protagCardValue < antagCardValue) {
                    updateHint("{after sacrifice} your " + protagCard + " beat " + antagCard + "; round " + roundnumber + " ends");
                    newRound();
                }
                else {
                    updateHint("{after sacrifice} your " + protagCard + " does not beat " + antagCard + ", how do you respond?");
                    responseTurnSetup();
                }
                
            }
            else {
                updateHint("Hint: this is not available to you to be sacrificed");
            }

        }
        else if (protagMove == "sacrifice") {
            // after sacrifice

            // card should be the one sacrificed

            // lower card wins
            if (protagCardValue < antagCardValue) {
                updateHint("{after sacrifice} your " + protagCard + " beat " + antagCard + "; round " + roundnumber + " ends");
                newRound();
            }
            else {
                updateHint("{after sacrifice} your " + protagCard + " does not beat " + antagCard + ", how do you respond?");
                responseTurnSetup();

                if (hand.includes(card)) {
                    moveCard(card, "hand", "table");
                    protagCard = card;
                    protagCardValue = cardValue(card);

                    if (protagCardValue < antagCardValue) {
                        updateHint("{after sacrifice} your " + protagCard + " beat " + antagCard + "; antagonist responds");

                        antagMove();

                        if (protagCardValue < antagCardValue) {
                            updateHint("{after sacrifice} your " + protagCard + " beat " + antagCard + "; round " + roundnumber + " ends");

                            newRound();
                        }
                        else {
                            updateHint("{after sacrifice} your " + protagCard + " does not beat " + antagCard + ", how do you respond?");
                            responseTurnSetup();
                        }
                    }
                    else {
                        updateHint("{after sacrifice} your " + protagCard + " does not beat " + antagCard + ", how do you respond?");
                        responseTurnSetup();
                    }
                }
            }
        }

        else if (protagMove == "attack") {
            // pick a card from hand

            if (hand.includes(card) && !attackCardPicked) {
                moveCard(card, "hand", "table");
                protagCard = card;
                protagCardValue = cardValue(card);
                attackCardPicked = true;
                updateHint("Hint: pick antagonist's resource to target; higher card wins");
            }
            if ((card == afacet || card == apshared ||
                card == abshared) && !targetCardPicked) {
                antagCard = card;
                antagCardValue = cardValue(card);
                targetCardPicked = true;
                updateHint("Hint: pick a card from your hand; higher card wins");
            }

            if (attackCardPicked && targetCardPicked) {

                // higher card wins
                if (protagCardValue > antagCardValue) {
                    // remove the targeted resource card,
                    // from play, and the other 2 resources
                    // becomes usable by the player
                    if (afacet == antagCard) {
                        afacet = "";
                        updateAFacet();
                        resources.push(apshared);
                        resources.push(abshared);
                    }
                    else if (apshared == antagCard) {
                        apshared = "";
                        updateAPShared();
                        resources.push(afacet);
                        resources.push(abshared);
                    }
                    else if (abshared == antagCard) {
                        abshared = "";
                        updateABShared();
                        resources.push(afacet);
                        resources.push(apshared);
                    }
                    attackCardPicked = false;
                    targetCardPicked = false;
                    antagAttacked = true;
                    updateHint("{attack antagonist} your " + protagCard + " beat " + antagCard + "; you gain antagonist's remaining 2 resources; round " + roundnumber + " ends");
                    newRound();
                }
                else {
                    attackCardPicked = false;
                    targetCardPicked = false;
                    responseTurnSetup();
                    updateHint("{attack antagonist} your " + protagCard + " does not beat " + antagCard + ", how do you respond?");
                    antagCard = "";
                }
            }
        }
    }

    // after clicking, clear focus
    focus = "";
}

function moveCard(card, from, to) {
    var index = 0;

    if (phase == "setup") {
        if (from == "table" && to == "protagonist") {
            index = table.indexOf(card);
            if (index > -1) {
                table.splice(index, 1);
                protagonist = card;
                updateTable();
                updateProtagonist();
            }
        }

        else if (from == "protagonist" && to == "table") {
            if (protagonist == card) {
                protagonist = "";
                table.push(card);
                updateTable();
                updateProtagonist();
            }
        }

        else if (from == "table" && to == "beloved") {
            index = table.indexOf(card);
            if (index > -1) {
                table.splice(index, 1);
                beloved = card;
                updateTable();
                updateBeloved();
            }
        }

        else if (from == "beloved" && to == "table") {
            if (beloved == card) {
                beloved = "";
                table.push(card);
                updateTable();
                updateBeloved();
            }
        }

        else if (from == "table" && to == "antagonist") {
            index = table.indexOf(card);
            if (index > -1) {
                table.splice(index, 1);
                antagonist = card;
                updateTable();
                updateAntagonist();
            }
        }

        else if (from == "antagonist" && to == "table") {
            if (antagonist == card) {
                antagonist = "";
                table.push(card);
                updateTable();
                updateAntagonist();
            }
        }

        else if (from == "table" && to == "pfacet") {
            index = table.indexOf(card);
            if (index > -1) {
                table.splice(index, 1);
                pfacet = card;
                updateTable();
                updatePFacet();
            }
        }

        else if (from == "pfacet" && to == "table") {
            if (pfacet == card) {
                pfacet = "";
                table.push(card);
                updateTable();
                updatePFacet();
            }
        }

        else if (from == "table" && to == "bfacet") {
            index = table.indexOf(card);
            if (index > -1) {
                table.splice(index, 1);
                bfacet = card;
                updateTable();
                updateBFacet();
            }
        }

        else if (from == "bfacet" && to == "table") {
            if (bfacet == card) {
                bfacet = "";
                table.push(card);
                updateTable();
                updateBFacet();
            }
        }

        else if (from == "table" && to == "pbshared") {
            index = table.indexOf(card);
            if (index > -1) {
                table.splice(index, 1);
                pbshared = card;
                updateTable();
                updatePBShared();
            }
        }

        else if (from == "pbshared" && to == "table") {
            if (pbshared == card) {
                pbshared = "";
                table.push(card);
                updateTable();
                updatePBShared();
            }
        }

        else if (from == "table" && to == "afacet") {
            index = table.indexOf(card);
            if (index > -1) {
                table.splice(index, 1);
                afacet = card;
                updateTable();
                updateAFacet();
            }
        }

        else if (from == "afacet" && to == "table") {
            if (afacet == card) {
                afacet = "";
                table.push(card);
                updateTable();
                updateAFacet();
            }
        }

        else if (from == "table" && to == "apshared") {
            index = table.indexOf(card);
            if (index > -1) {
                table.splice(index, 1);
                apshared = card;
                updateTable();
                updateAPShared();
            }
        }

        else if (from == "apshared" && to == "table") {
            if (apshared == card) {
                apshared = "";
                table.push(card);
                updateTable();
                updateAPShared();
            }
        }

        else if (from == "table" && to == "abshared") {
            index = table.indexOf(card);
            if (index > -1) {
                table.splice(index, 1);
                abshared = card;
                updateTable();
                updateABShared();
            }
        }

        else if (from == "abshared" && to == "table") {
            if (abshared == card) {
                abshared = "";
                table.push(card);
                updateTable();
                updateABShared();
            }
        }
    }
    else if (phase == "play") {

        if (from == "deck" && to == "hand") {

            if (cards.length > 0) {

                while(true) { // loop until a valid card drawn

                    if (cards[0] == "RESHUFFLE") {
                        reshuffle();
                    }
                    else { // only add to hand if not a reshuffle card
                        card = cards.shift();
                        hand.push(card);
                        break;
                    }
                }
            }
            // update cards display
            updateHand();
        }

        else if (from == "deck" && to == "discard") {
            if (cards.length > 0) {

                while(true) { // loop until a valid card drawn

                    if (cards[0] == "RESHUFFLE") {
                        reshuffle();
                    }
                    else { // only add to hand if not a reshuffle card
                        card = cards.shift();
                        discard.push(card);
                        break;
                    }
                }
            }
            // update cards display
            updateDiscard();
        }

        else if (from == "deck" && to == "table") {
            if (cards.length > 0) {
                while(true) { // loop until a valid card drawn
                    if (cards[0] == "RESHUFFLE") {
                        reshuffle();
                    }
                    else { // only add to hand if not a reshuffle card
                        card = cards.shift();
                        table.push(card);
                        break;
                    }    
                }
            }
        }

        else if (from == "hand" && to == "table") {
            var index = hand.indexOf(card);
            if (index > -1) {
                hand.splice(index, 1);
                table.push(card);
                updateHand();
                updateTable();
            }
            else {
                updateHint("Hint: you can only play a card from your hand");
            }
        }
    }
}

function cardType(card) {
    return card.substring(0, card.indexOf(":")).toLowerCase();
}

function cardDesc(card) {
    return card.substring(card.indexOf(":")+2, card.indexOf("(")-1);
}

function cardValue(card) {
    var num = 0;
    if (card) {
        num = parseInt(card.substring(card.lastIndexOf("(")+1,card.lastIndexOf(")")));
    }

    return num;
}

function onlyReshuffleCardsRemain() {
    var check = true;

    if (cards.length == 0) {
        check = false;
    }
    else {

        for (var i = 0; i < cards.length; i++) {
            if (cards[i] != "RESHUFFLE") {
                check = false;
                break;
            }
        }
    }

    return check;
}

function hasLowerResource() {
    var check = false;

    for (var i = 0; i < resources.length; i++) {
        if (cardValue(resources[i]) < cardValue(antagCard)) {
            check = true;
            break;
        }
    }

    return check;
}

function play() {
    phase = "play";
    roundnumber++;
    updateHint("[round " + roundnumber + "]");

    // finalize resources that player can use
    // (antagonist resource still remain on table)
    if (pfacet) {
        resources.push(pfacet);
    }
    if (bfacet) {
        resources.push(bfacet);
    }
    if (pbshared) {
        resources.push(pbshared);
    }

    // put non-resource cards back into deck

    if (protagonist) {
        table.push(protagonist);
    }
    if (beloved) {
        table.push(beloved);
    }
    if (antagonist) {
        table.push(antagonist);
    }
    cards = cards.concat(table);
    table = new Array();
    updateTable();

    // add RESHUFFLE cards
    for (var i = 0; i < num_of_reshuffle_cards; i++) {
        cards.push("RESHUFFLE");
    }
    // shuffle deck
    cards = shuffle(cards);

    // then draw a hand of 5 cards
    for (var i = 0; i < 5; i++) {
        moveCard("", "deck", "hand");
    }

    // remove setup listener
    var x = document.getElementById("setup");
    x.removeEventListener("click", setupListener);

    // add game time listener
    
    if (x.addEventListener) {
        // For all major browsers, except IE 8 and earlier
        x.addEventListener("click", gameOverListener);
    } else if (x.attachEvent) {
        // For IE 8 and earlier versions
        x.attachEvent("onclick", gameOverListener);
    }

    // update other parts of UI
    document.getElementById("finishsetup").style.display = "none";
    document.getElementById("table").style.height = "150px";
    document.getElementById("discard").style.display = "inline-block";
    document.getElementById("hand").style.display = "inline-block";
    updateDeck();
    updateDiscard();
    updateProtagonist();
    updateBeloved();
    updateAntagonist();
    enablePlayerTurnButtons();
    updateHint("Hint: with 5 cards in hand, you can choose the above options");
}

function end() {
    // remove setup listener
    var x = document.getElementById("setup");
    x.removeEventListener("click", gameOverListener);

    enablePlayerTurnButtons(false);
    enablePlayerResponseButtons(false);
    document.getElementById("gameover").style.display = "inline";
    phase = "";
    focus = "";
}

function waitAndSee() {
    protagMove = "wait";
    moveCard("","deck","hand");
    updateHint("{wait and see} draw 1 card into hand");
    antagMove();
    responseTurnSetup();
}

function pursueGoal() {
    var hint = "{pursue goal} select a card to play before antagonist responds; lower card wins";
    protagMove = "pursue";
    setFocus("pursue");
    updateHint(hint);
}

function sacrificeResource() {
    var hint = "{sacrifice resource} select a resource to sacrifice that doesn't belong to the antagonist";
    protagMove = "sacrifice";
    setFocus("sacrifice");
    updateHint(hint);
}

function reverseCondition() {
    var hint = "{reverse condition} select a card to play before antagonist responds; lower card wins";
    protagMove = "reverse";
    setFocus("reverse");
    updateHint(hint);
}

function attackAntagonist() {
    var hint = "{attack antagonist} select a card from your hand, then a resource that belongs to the antagonist; higher card wins";
    protagMove = "attack";
    setFocus("attack");
    updateHint(hint);
}

function playFromDeck() {
    if (protagCard == "") { // get new card if invalidated
        moveCard("", "deck", "table");
        protagCard = table[table.length - 1];
        protagCardValue = cardValue(protagCard);
    }

    if (protagMove == "wait") {
        // higher card wins

        if (protagCardValue > antagCardValue) {            
            updateHint("{play from deck} your " + protagCard + " beat " + antagCard + "; antagonist responds");

            // antagonist will respond
            antagMove();

            if (protagCardValue > antagCardValue) {
                // round over
                updateHint("{after wait-and-see} your " + protagCard + " beat " + antagCard + "; round " + roundnumber + " ends");
                newRound();
            }
            else {
                updateHint("{after wait-and-see} your " + protagCard + " does not beat " + antagCard + "; how do you respond?");
                protagCard = "";
            }
        }
        else {
            conditions++;
            updateProtagonist();
            updateHint("{play from deck} your " + protagCard + " did not beat " + antagCard + "; gain a condition; round " + roundnumber + " ends");
            newRound();
        }
    }
    else if (protagMove == "pursue") {
        // lower card wins
        if (protagCardValue < antagCardValue) {
            updateHint("{play from deck} your " + protagCard + " beat " + antagCard + "; antagonist responds");

            // antagonist will respond
            antagMove();

            if (protagCardValue < antagCardValue) {
                // round over
                updateHint("{after pursue goal} your " + protagCard + " beat " + antagCard + "; gain progress; round " + roundnumber + " ends");
                goalProgress++;
                updateProtagonist();
                newRound();
            }
            else {
                updateHint("{after pursue goal} your " + protagCard + " does not beat " + antagCard + "; how do you respond?");
                protagCard = "";
            }
        }
        else {
            conditions++;
            updateProtagonist();
            updateHint("{play from deck} your " + protagCard + " did not beat " + antagCard + "; gain a condition; round " + roundnumber + " ends");
            newRound();
        }
    }

    else if (protagMove == "reverse") {
        // lower card wins
        if (protagCardValue < antagCardValue) {
            updateHint("{play from deck} your " + protagCard + " beat " + antagCard + "; antagonist responds");

            // antagonist will respond
            antagMove();

            if (protagCardValue < antagCardValue) {
                // round over
                updateHint("{after reverse condition} your " + protagCard + " beat " + antagCard + "; reverse one condition narratively but not mechanically; round " + roundnumber + " ends");
                newRound();
            }
            else {
                updateHint("{after reverse condition} your " + protagCard + " does not beat " + antagCard + "; how do you respond?");
                protagCard = "";
            }
        }
        else {
            conditions++;
            updateProtagonist();
            updateHint("{play from deck} your " + protagCard + " did not beat " + antagCard + "; gain a condition; round " + roundnumber + " ends");
            newRound();
        }
    }

    else if (protagMove == "sacrifice") {
        // lower card wins
        if (protagCardValue < antagCardValue) {
            updateHint("{play from deck} your " + protagCard + " beat " + antagCard + "; antagonist responds");
            // antagonist will respond
            antagMove();

            if (protagCardValue < antagCardValue) {
                // round over
                updateHint("{after sacrifice} your " + protagCard + " beat " + antagCard + "; round " + roundnumber + " ends");
                newRound();
            }
            else {
                updateHint("{after sacrifice} your " + protagCard + " does not beat " + antagCard + "; how do you respond?");
                protagCard = "";
            }
        }
        else {
            conditions++;
            updateProtagonist();
            updateHint("{play from deck} your " + protagCard + " did not beat " + antagCard + "; gain a condition; round " + roundnumber + " ends");
            newRound();
        }
    }
    else if (protagMove == "attack") {
        // higher card wins
        if (protagCardValue > antagCardValue) {
            // remove the targeted resource card,
            // from play, and the other 2 resources
            // becomes usable by the player
            if (afacet == antagCard) {
                afacet = "";
                updateAFacet();
                resources.push(apshared);
                resources.push(abshared);
            }
            else if (apshared == antagCard) {
                apshared = "";
                updateAPShared();
                resources.push(afacet);
                resources.push(abshared);
            }
            else if (abshared == antagCard) {
                abshared = "";
                updateABShared();
                resources.push(afacet);
                resources.push(apshared);
            }
            attackCardPicked = false;
            targetCardPicked = false;
            antagAttacked = true;

            updateHint("{play from deck} your " + protagCard + " beat " + antagCard + "; antagonist responds");
            // antagonist will respond
            antagMove();

            if (protagCardValue > antagCardValue) {
                // round over
                updateHint("{after attack} your " + protagCard + " beat " + antagCard + "; round " + roundnumber + " ends");
                newRound();
            }
            else {
                updateHint("{after attack} your " + protagCard + " does not beat " + antagCard + "; how do you respond?");
                protagCard = "";
            }

        }
        else {
            attackCardPicked = false;
            targetCardPicked = false;
            conditions++;
            updateProtagonist();
            updateHint("{play from deck} your " + protagCard + " did not beat " + antagCard + "; gain a condition; round " + roundnumber + " ends");
            newRound();
        }
    }
}

function giveIn() {
    // gain a condition, but also draw a card
    conditions++;
    updateProtagonist();
    moveCard("","deck","hand");
    updateHint("{give in} gain a condition and draw 1 card into hand; round " + roundnumber + " ends");
    newRound();
}

function newRound() {
    enablePlayerResponseButtons(false);
    enablePlayerTurnButtons();
    // clear table
    discard = discard.concat(table);
    table = new Array();
    updateTable();
    updateDiscard();
    focus = "";
    protagMove = "";
    protagCard = "";
    antagCard = "";

    if (conditions < conditionMax && goalProgress < goalMax) {
        // keep counting rounds unless game over
        roundnumber++;
        updateHint("[round " + roundnumber + "]");
    }
}

function responseTurnSetup() {
    enablePlayerTurnButtons(false);
    enablePlayerResponseButtons();
}

function antagMove() {
    var hint = "";

    moveCard("","deck","discard");
    antagCard = discard[discard.length - 1];
    antagCardValue = cardValue(antagCard);
    hint = "{antagonist's move} " + antagCard;

    if (protagMove == "wait" || protagMove == "attack") {
        hint += "; higher card wins; play from hand or use another option";
    }
    else if (protagMove == "pursue" || protagMove == "reverse" ||
             protagMove == "sacrifice") {
        hint += "; lower card wins; play from hand or use another option";
    }

    updateHint(hint);
}

////// EVENT LISTENERS /////////////

function setupListener() {
    //if all needed elements are decided, offer
    //option to finish setup

    if (protagonist != "" && beloved != "" && antagonist != "" &&
        pfacet != "" && bfacet != "" && pbshared != "" &&
        afacet != "" && apshared != "" && abshared != "") {

        document.getElementById("finishsetup").style.display = "inline";
    }

    else { // otherwise hide that option
        document.getElementById("finishsetup").style.display = "none";
    }
}

function gameOverListener() {
    var hint_victory = "VICTORY! Use remaining cards in hand to write an epilogue?";
    var hint_defeat = "DEFEATED! Use remaining cards in hand to write an epilogue?";
    

    if (conditions >= conditionMax) {
        updateHint(hint_defeat);
        end();
    }
    else if (goalProgress >= goalMax) {
        updateHint(hint_victory);
        end();
    }

    if (onlyReshuffleCardsRemain()) {
        updateHint("note: the only cards left in the deck are \"Reshuffle\" cards, game cannot continue");
        end();
    }
}

// if user paste in a custom list of cards
// reset the game with the new cards instead
function useNewCards() {
    var list = $("#writeup").val().split("\n");
    var passCheck = true;

    if (list.length > 0 && list[0]) {
        // list doesn't contain just a single newline
        // check if the card format is correct
        for (var i = 0; i < list.length; i++) {
          // trim beginning and ending white space
          list[i] = list[i].trim();
          if (!cardFormatOK(list[i])) {
            passCheck = false;
            break;
          }
        }
    }
    else {
        passCheck = false;
    }

    if (passCheck) {
        cards = list;
        newSetup();
        updateTable();

        // hide link and clear textarea
        $("#writeup").val("");
        $("#writeup").attr("placeholder","premise, goals, story");
        $(".submit").hide();
    }
    else {
        alert("Please double-check if all cards are formatted correctly.");
    }
}

function cardFormatOK(card) {
    var c = cardType(card);
    var result = false;

    if (c == "character" || c == "event" ||
        c == "item" || c == "place" ||
        c == "aspect" || c == "detail") {
        result = true;
    }
    return result;
}

/////// MAIN /////////////////
var num_of_reshuffle_cards = Math.ceil(cards.length / 18);

var table = new Array();
var resources = new Array();
var discard = new Array();
var hand = new Array();

var phase = "setup";
var roundnumber = 0;
var focus = "";
var protagonist = "";
var beloved = "";
var antagonist = "";
var pfacet = "";
var bfacet = "";
var pbshared = "";
var afacet = "";
var apshared = "";
var abshared = "";

var color = "black";
var goalProgress = 0;
var goalMax = 3;
var conditions = 0;
var conditionMax = 3;
var protagMove = "";
var protagCard = "";
var protagCardValue = 0;
var antagCard = "";
var antagCardValue = 0;
var antagAttacked = false;
var attackCardPicked = false;
var targetCardPicked = false;

newSetup();

function newSetup() {
    num_of_reshuffle_cards = Math.ceil(cards.length / 18);
    table = new Array();
    resources = new Array();
    discard = new Array();
    hand = new Array();

    phase = "setup";
    roundnumber = 0;
    focus = "";
    protagonist = "";
    beloved = "";
    antagonist = "";
    pfacet = "";
    bfacet = "";
    pbshared = "";
    afacet = "";
    apshared = "";
    abshared = "";

    color = "black";
    goalProgress = 0;
    conditions = 0;
    protagMove = "";
    protagCard = "";
    protagCardValue = 0;
    antagCard = "";
    antagCardValue = 0;
    antagAttacked = false;
    attackCardPicked = false;
    targetCardPicked = false;

    // step 0: prepare the initial deck

    cards = shuffle(cards);

    // give each card a value
    for (var c = 0; c < cards.length; c++) {
        cards[c] = cards[c] + " (" + (c+1) + ")";
    }

    // reshuffle again to keep things different each time
    cards = shuffle(cards);

    // step 1: draw from deck until 5 character cards drawn,
    // but make sure at least 6 resources cards are drawn as well

    var num_of_character_cards = 0;
    var num_of_cards = 0;

    for (var i = 0; i < cards.length; i++) {

        var card = cards.shift();
        table.push(card);

        if (card.search("character") == 0) {
            num_of_character_cards += 1;
        }

        num_of_cards += 1;

        if (num_of_character_cards >= 5 &&
            num_of_cards >= 16) {
            break;   
        }
    }
}

$(document).on("click",".submit",useNewCards);
</script>
<style>
body {
    width: 100%;
    margin: 0;
    font-size: 62.5%; /* 1em = 10px */
    font-family: tahoma, sans-serif;
}

#setup {
    width: 100%;
}

#table {
    text-align: center;
    width: 800px;
    height: 600px;
    overflow: auto;
    border: 3px outset #cccccc;
    background-color: mintcream;
}
#hand {
    float: left;
    width: 800px;
    height: 200px;
    overflow: auto;
}

#sidebar1 {
    width: 250px;
    height: 450px;
    overflow: auto;
    text-align: center;
    border: 1px solid #cccccc;
}

#progress {
    color: green;
}
#conditions {
    color: red;
}

#sidebar2 {
    width: 400px;
    height: 700px;
    overflow: auto;
    background-color: #ccffff;
}
#sidebar2 textarea {
    width: 350px;
    height: 600px;
    padding: 10px;
    margin: 0.5em;
    border-radius: 5px;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    border: none;
    font-size: 3em;
    resize: none;
}

#pfacet, #bfacet, #pbshared, #afacet, #apshared, #abshared, #protagonist, #beloved, #antagonist
{
    display: inline-block;
    width: 6em;
    margin: 0.2em;
    border: 1px solid #cccccc;
    text-align: center;
    font-size: 2em;
}
#pfacet .card, #bfacet .card, #pbshared .card, #afacet .card, #apshared .card, #abshared .card, #protagonist .card, #beloved .card, #antagonist .card
{
    font-size: 0.8em;
}

#pfacet a:active, #bfacet a:active, #pbshared a:active,
#afacet a:active, #apshared a:active, #abshared a:active,
#deck a:active, #discard a:active, #hand a:active,
#protagonist a:active, #beloved a:active, #antagonist a:active
{
    background-color: yellow;
}
#pfacet a:focus, #bfacet a:focus, #pbshared a:focus,
#afacet a:focus, #apshared a:focus, #abshared a:focus,
#deck a:focus, #discard a:focus, #hand a:focus,
#protagonist a:focus, #beloved a:focus, #antagonist a:focus
{
    color: red;
}

#deck, #discard, #hand {
    display: inline-block;
    margin-top: 0.2em;
    padding: 0.2em;
    text-align: center;
}

#deck {
    border: 1px solid black;
    font-size: 1.5em;
}

#discard {
    width: 6em;
    border: 1px solid #cccccc;
    background-color: #cccccc;
}

#hand {
    border: 2px dashed green;
    font-size: 1em;
}

#gamelog {
    clear: left;
    color: orange;
    font-size: 1.5em;
    width: 100%;
    height: 150px;
    overflow: auto;
}

#hint {
    clear: left;
    display: inline-block;
    color: orange;
    font-size: 1.5em;
}

.card {
    display: inline-block;
    width: 6em;
    margin: 0.5em;
    border: 1px solid black;
    font-size: 1.5em;
}
.card:active {
    background-color: yellow;
}
</style>
</head>
<body>
<div id="setup">
    <script>
        var x = document.getElementById("setup");
        if (x.addEventListener) {
            // For all major browsers, except IE 8 and earlier
            x.addEventListener("click", setupListener);
        } else if (x.attachEvent) {
            // For IE 8 and earlier versions
            x.attachEvent("onclick", setupListener);
        }
    </script>
    <table width="100%">
    <tr><td>
    <table>
    <tr><td colspan="2">
    <div id="resources">
        <div id="pfacet"><a href="#" onclick="setFocus('pfacet')">Protagonist Facet</a></div>
        <div id="bfacet"><a href="#" onclick="setFocus('bfacet')">Beloved Facet</a></div>
        <div id="pbshared"><a href="#" onclick="setFocus('pbshared')">Shared between P/B</a></div>
        <div id="afacet"><a href="#" onclick="setFocus('afacet')">Antagonist Facet</a></div>
        <div id="apshared"><a href="#" onclick="setFocus('apshared')">Shared between A/P</a></div>
        <div id="abshared"><a href="#" onclick="setFocus('abshared')">Shared between A/B</a></div>
    </div>
    </td></tr>
    <tr><td>
    <div id="table">
    <script>updateTable();</script>
    </div>
    <div id="hand" style="display: none">Hand</div>
    </td><td>
    <div id="sidebar1">
        <div id="protagonist"><a href="#" onclick="setFocus('protagonist')">Protagonist</a></div>
        <div id="beloved"><a href="#" onclick="setFocus('beloved')">Beloved</a></div>
        <div id="antagonist"><a href="#" onclick="setFocus('antagonist')">Antagonist</a></div>
    </div>
    </td></tr>
    <tr><td colspan="2">
    <div id="bottomrow">
        <div id="deck"><a href="#" onclick="setFocus('deck')">Deck</a></div>
        <div id="discard" style="display: none"><a href="#">Discarded</a></div>
        
        <button id="finishsetup" style="display: none" onclick="play()">Finish Setup, Start Playing</button>
        <button id="gameover" style="display: none" onclick="window.location.reload()">Game Over, Restart</button>
        <button id="waitandsee" style="display: none" onclick="waitAndSee()">Wait And See</button>
        <button id="pursuegoal" style="display: none" onclick="pursueGoal()">Pursue Goal</button>
        <button id="playfromdeck" style="display: none" onclick="playFromDeck()">Play From Deck</button>
        <button id="sacrificeresource" style="display: none" onclick="sacrificeResource()">Sacrifice Resource</button>
        <button id="reversecondition" style="display: none" onclick="reverseCondition()">Reverse Condition</button>
        <button id="attackantagonist" style="display: none" onclick="attackAntagonist()">Attack Antagonist</button>
        <button id="givein" style="display: none" onclick="giveIn()">Give In</button>
        <br>
        <div id="gamelog"></div>
    </div>
    </td></tr>
    </table>
    </td>
    <td valign="top" align="right">
    <div id="sidebar2">
        <textarea id="writeup" placeholder="premise, goals, story&#10;&#10;or paste in your custom card list, preferrably with at least 5 characters and at least 9 cards (then click link below), formated like...&#10;&#10;character: person&#10;place: location&#10;event: event&#10;item: thing&#10;aspect: aspect&#10;detail: detail"></textarea>
        <center><a style="font-size: 2em" href="#" class="submit" target="_self">use pasted-in cards</a></center>
    </div>
    <a href="http://gamedevblog.typepad.com/Storyleaves.pdf" >Jamie Fristrom's solo RPG</a>
    </td></tr>
    </table>
</div>
</body>
</html>
